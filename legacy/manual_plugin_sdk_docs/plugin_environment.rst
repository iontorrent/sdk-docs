Plugin Runtime Environment
==========================

.. contents::

Execution Environment
---------------------

The mechanism for running plugins is a bash shell script, launch.sh. The script is a template that contains code to
generate a list of shell variables that contain useful information about the analysis results, raw data and paths
output files, such as SFF, BAM and FASTQ.

.. note:: The contents of launch.sh must include only the shell commands needed to execute the plugin.

Shell script execution is controlled by submitting the script to the Sun Grid Engine (SGE) scheduling system. When more than one plugin is registered to run, the plugins are submitted sequentially to the SGE job queue. Job queue behavior depends on server configuration:
In a single Torrent Server configuration, plugin jobs run sequentially according to the constraints established by job queue configuration.
In multi-compute node environments, the jobs execute as compute and memory resources are available.

Scripts can be invoked automatically or manually:
* Automatic Mode: The script executes at the completion of every analysis pipeline processing run.
* Manual Mode: The script is executed when the plugin is selected from the Manual Plugin Launch window, accessed from the Default Report Page.

Execution Variables
-------------------

The following launch.sh shell variables are available to you. A list of available variables is commented within the template script.

==========================  ============================================================================================
Variable	                Description
==========================  ============================================================================================
RAW_DATA_DIR 	            Filesystem path to the directory containing the raw data files generated by the PGM instrument
ANALYSIS_DIR 	            Filesystem path to the directory containing the results of the analysis pipeline processing
LIBRARY_KEY 	            Nucleotide base key sequence identifying library reads (i.e., "TCAG")
TESTFRAG_KEY 	            Nucleotide base key sequence identifying test fragment reads (i.e., "ATCG")
RESULTS_DIR 	            Filesystem path to the directory where a given plugin can write files (i.e., /results/analysis/output/Home/Auto_CAR-212_123/plugin_out/variantCalling_out)
URL_ROOT 	                Web path to the directory containing the results of the analysis pipeline processing
TSP_ANALYSIS_CYCLES 	    (Deprecated: Use TSP_NUM_FLOWS) Number of times the flow order was cycled during the PGM run.
TSP_ANALYSIS_DATE 	        Date and time of the analysis
TSP_ANALYSIS_NAME 	        Identifier string for this analysis
TSP_CHIPTYPE 	            PGM chip type (i.e., 314, 316)
TSP_FILEPATH_BAM 	        Filesystem path to the BAM file
TSP_FILEPATH_BARCODE_TXT    Filesystem path to the barcodeList.txt file
TSP_FILEPATH_FASTQ 	        Filesystem path to the fastq file
TSP_FILEPATH_OUTPUT_STEM    Filesystem path to the analysis directory with customer-deliverable filename appended
TSP_FILEPATH_PLUGIN_DIR     Filesystem path to the plugin's output directory.  Same as RESULTS_DIR variable
TSP_FILEPATH_SFF 	        Filesystem path to the sff file
TSP_FILEPATH_TF_SFF 	    Filesystem path to the test fragment sff file
TSP_FILEPATH_GENOME_FASTA   Filesystem path to the reference genome fasta file used in alignment
TSP_FLOWORDER 	            Sequence of nucleotide flows used in PGM experiment ( 1 'cycle')
TSP_LIBRARY 	            Name of genomic library specified for QC alignment
TSP_LIBRARY_KEY 	        Nucleotide base key sequence identifying library reads (i.e., "TCAG")  Same as LIBRARY_KEY variable
TSP_NOTES 	                User information entered at the PGM
TSP_NUM_FLOWS 	            Total number of nucleotide flows in the experiment
TSP_PGM_NAME 	            Name of the PGM instrument that generated the raw data
TSP_PROJECT 	            User specified Project identifier
TSP_RUNID 	                Unique 5 character identifier used in the read names
TSP_RUN_NAME 	            PGM experiment identifier, also is the directory name of the raw data directory
TSP_SAMPLE 	                User specified Sample identifier
TSP_TF_KEY 	                Nucleotide base key sequence identifying test fragment reads (i.e., "ATCG")  Same as TESTFRAG_KEY variable
TSP_URLPATH_BAM 	        Web path to the BAM file
TSP_URLPATH_BARCODE_TXT     Web path to the barcodeList.txt file
TSP_URLPATH_FASTQ 	        Web path to the fastq file
TSP_URLPATH_OUTPUT_STEM     Web path to the analysis directory with customer-deliverable filename appended
TSP_URLPATH_PLUGIN_DIR 	    Web path to the plugin's output directory.
TSP_URLPATH_SAM 	        (Do not use) SAM file is no longer a customer deliverable file.
TSP_URLPATH_SFF 	        Web path to the sff file
TSP_URLPATH_TF_SFF 	        Web path to the test fragment sff file
TSP_URLPATH_GENOME_FASTA    Web path to the reference genome fasta file used in alignment
json_fname	                (Note: it is lowercase)  Filesystem path to the json file used to launch the plugin script
==========================  ============================================================================================


The plugin daemon receives a JSON file as input. For example:

.. code-block:: json

    {
        "runinfo":{
            "raw_data_dir":"/results/PGM_test",
            "analysis_dir":"/results/analysis/output/Home/test_bpp_006",
            "library_key":"TCAG",
            "testfrag_key":"ATCG",
            "results_dir":"/home/bpuc",
            "url_root":"http://thing2.ite",
            "net_location":"http://ecto5.ite"
        },
        "pluginconfig":{
            "plugin_name":"ftpTransfer",
            "plugin_path":"/results/plugins/ftpTransfer",
            "plugin_pk":"7",
            "ftpserver":"iontorrent.com",
            "ftpuser":"bpuc",
            "ftppassword":"bernard1",
            "ftpsubdir":"my_data_dir_in_the_cloud",
            "debug":"1",
            "limit_vmem":"8388608",
            "ftpfiles":["fastq","sff","sam","bam"]
        },
        "globalconfig":{
            "debug":"0",
            "limit_vmem":"4194304"
        }
    }

.. note:: Only the runinfo resource is required.

And the JSON string shown in the example populates the shell variables as follows:

.. code-block:: python

    RUNINFO__RAW_DATA_DIR="/results/PGM_test"
    RUNINFO__ANALYSIS_DIR="/results/analysis/output/Home/test_bpp_006"
    RUNINFO__LIBRARY_KEY="TCAG"
    RUNINFO__TESTFRAG_KEY="ATCG"
    RUNINFO__RESULTS_DIR="/home/bpuc"
    RUNINFO__URL_ROOT="http://thing2.ite"
    PLUGINCONFIG__PLUGIN_NAME="ftpTransfer"
    PLUGINCONFIG__PLUGIN_PATH="/results/plugins/ftpTransfer"
    PLUGINCONFIG__PLUGIN_PK="7"
    PLUGINCONFIG__FTPSERVER="iontorrent.com"
    PLUGINCONFIG__FTPUSER="bpuc"
    PLUGINCONFIG__FTPPASSWORD="bernard1"
    PLUGINCONFIG__FTPSUBDIR="my_data_dir_in_the_cloud"
    PLUGINCONFIG__FILES[0]="fastq"
    PLUGINCONFIG__FILES[1]="sff"
    PLUGINCONFIG__FILES[2]="sam"
    PLUGINCONFIG__FILES[3]="bam"
    GLOBALCONFIG__DEBUG=0
    GLOBALCONFIG__LIMIT_VMEM=4194304


For acquiring additional data about the run, if the information is available using the REST interface or in an existing file, you can write a program to retrieve the data.

Plugin Output
-------------

The plugin has write permission in both the plugin_out directory and the plugin-specific subdirectory in the "plugin_out" folder of the analysis output.

The ``RESULTS_DIR`` shell variable identifies the directory where all output is written. For files that are useful to
share in subsequent executions of the same plugin, the common directory where plugins have write permissions is /results/plugins/scratch.

* STDOUT/STDERR
    Any stdout and stderr outputs are written to a plugin_out subdirectory as drmaa_stdout.txt. This is accessible to the user as the 'Log' output.

* HTML / PHP Script
    Torrent Server searches for any .html and .php files in the plugin output directory, such as index.html, and creates a link on the Default Report page.
    Any files that ending with  _block.html  or _block.php are rendered inline in an iframe of the Report Page.
    All other html or php files in the top level of the plugin output folder will be linked at the bottom of the plugin output box on the report page.

* JSON
    Torrent Server searches for a file called results.json. The contents of this file are stored in the database and are
    accessible using the RESTful API. The intent of this feature is to store high-level metrics for characterization purposes,
    not to create an extensive repository of plugin results.
    The value is accessible later as the "store" element of PluginResult resource in the REST API.

